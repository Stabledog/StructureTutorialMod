buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = "${mod_version}"
group = 'com.telepathicgrunt.structuretutorial' // https://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'structure_tutorial'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    // MCPBot is dead. Do not use that to check for updates.
    // if you want the absolute latest mapping, run ` gradlew -PUPDATE_MAPPINGS="20200916-1.16.2" updateMappings `
    // command for the project and it'll remap everything to the cutting-edge mappings!
    mappings channel: "official", version: "${mc_version}"
    
    // Structures in 1.16.3+ require you to place them in some vanilla maps which are private variables
    // The access transformer allows us to make them public so we can place our structures in them
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    
    
    runs {
        client {
            workingDirectory project.file('run')
            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Needed to make other mods with mixins be able to run in you development environment
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods { examplemod { source sourceSets.main } }
        }

        server {
            workingDirectory project.file('run')
            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Needed to make other mods with mixins be able to run in you development environment
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods { examplemod {  source sourceSets.main } }
        }
    }
}

repositories {
    // Repo for getting Blame from
    maven { url "https://nexus.resourcefulbees.com/repository/telepathicgrunt/" }
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    // I recommend having Blame on in your development environment as it can give you more info of what is
    // broken with your Jigsaw structure. It is super useful!. Just uncomment out this line and refresh gradle.
    // implementation fg.deobf("com.telepathicgrunt:Blame:1.16.5-3.0.0-forge")
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "structure_tutorial",
            "Specification-Vendor": "telepathicgrunt",
            "Specification-Version": "1",
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"telepathicgrunt",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}


// Bonus stuff!
import groovy.json.JsonParserType
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
processResources {
    // Will allow gradle.properties version fill inside mods.toml file
    // This will ensure that this task is redone when the versions change.
    inputs.property 'version', project.version

    // Replace stuff in mods.toml, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'

        // Replace version
        expand 'version':project.version
    }

    // Copy everything else except the mods.toml
    from(sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml'
    }


    // Will minify the JSON files of your mod when you build the jar.
    // Helps reduce files size! Minify means it will strip whitespace
    // and turn the JSON files into 1 liners.
    doLast {
        def jsonMinifyStart = System.currentTimeMillis()
        def jsonMinified = 0
        def jsonBytesSaved = 0
        fileTree(dir: outputs.files.asPath, include: '**/*.json').each {
            File file = it
            jsonMinified++
            def oldLength = file.length()
            file.text = JsonOutput.toJson(new JsonSlurper(type: JsonParserType.LAX).parse(file))
            jsonBytesSaved += oldLength - file.length()
        }
        println('Minified ' + jsonMinified + ' json files. Saved ' + jsonBytesSaved + ' bytes. Took ' + (System.currentTimeMillis() - jsonMinifyStart) + 'ms.')
    }
}
